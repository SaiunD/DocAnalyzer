import asyncio
import logging
import os

import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_BASE_URL = "http://localhost:8000/api/v1"

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

choice_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫")],
        [KeyboardButton(text="üìù –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–º—ñ—Å—Ç —Ç–∞ —Ç–µ–∑–∏")]
    ],
    resize_keyboard=True
)

new_file_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª")],
        [KeyboardButton(text="üîÅ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É")]
    ],
    resize_keyboard=True
)

user_docs = {}


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç (.txt), —ñ —è –ø—ñ–¥–≥–æ—Ç—É—é –¥–ª—è —Ç–µ–±–µ –ø—ñ–¥—Å—É–º–æ–∫ –∞–±–æ –∑–º—ñ—Å—Ç —Ç–∞ —Ç–µ–∑–∏.")


@dp.message(F.document)
async def handle_document(message: types.Message):
    file = message.document
    if not file.file_name.endswith(".txt"):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª (.txt)")
        return

    file_path = f"temp/{file.file_id}.txt"
    os.makedirs("temp", exist_ok=True)
    await bot.download(file, destination=file_path)

    user_docs[message.from_user.id] = file_path
    await message.answer("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ! –û–±–µ—Ä–∏, —â–æ –∑ –Ω–∏–º –∑—Ä–æ–±–∏—Ç–∏:", reply_markup=choice_keyboard)


@dp.message(F.text.in_(["üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫", "üìù –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–º—ñ—Å—Ç —Ç–∞ —Ç–µ–∑–∏"]))
async def handle_choice(message: types.Message):
    user_id = message.from_user.id
    file_path = user_docs.get(user_id)

    if not file_path or not os.path.exists(file_path):
        await message.answer("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–∞–π–ª —â–µ —Ä–∞–∑.")
        return

    endpoint = "/get_summary" if message.text == "üìÑ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫" else "/get_contents_and_theses"

    async with aiohttp.ClientSession() as session:
        with open(file_path, "rb") as f:
            form = aiohttp.FormData()
            form.add_field("file", f, filename="document.txt", content_type="text/plain")

            async with session.post(API_BASE_URL + endpoint, data=form) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    key = "summary" if "summary" in data else "contents"
                    await message.answer(data[key])
                else:
                    await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É.")

    await message.answer("–©–æ —Ö–æ—á–µ—à —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=new_file_keyboard)


# –û–Ω–æ–≤–ª–µ–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–æ–≤–∏–º —Ñ–∞–π–ª–æ–º –∞–±–æ –ø–æ—Ç–æ—á–Ω–∏–º
@dp.message(F.text == "üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª")
async def handle_new_file(message: types.Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
    user_docs.pop(message.from_user.id, None)


@dp.message(F.text == "üîÅ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É")
async def handle_current_file(message: types.Message):
    user_id = message.from_user.id
    file_path = user_docs.get(user_id)

    if not file_path or not os.path.exists(file_path):
        await message.answer("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–∞–π–ª —â–µ —Ä–∞–∑.")
        return

    await message.answer("–í–∏–±–µ—Ä–∏, —â–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º —Ñ–∞–π–ª–æ–º –∑—Ä–æ–±–∏—Ç–∏:", reply_markup=choice_keyboard)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
